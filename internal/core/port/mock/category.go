// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vitovidale/TECH-CHALLENGE/internal/core/port (interfaces: CategoryRepository)
//
// Generated by this command:
//
//	mockgen . CategoryRepository
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/vitovidale/TECH-CHALLENGE/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryRepository) Create(ctx context.Context, p *domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCategoryRepositoryMockRecorder) Create(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepository)(nil).Create), ctx, p)
}

// Delete mocks base method.
func (m *MockCategoryRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryRepository)(nil).Delete), ctx, id)
}

// FindAllCategories mocks base method.
func (m *MockCategoryRepository) FindAllCategories(ctx context.Context) ([]*domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCategories", ctx)
	ret0, _ := ret[0].([]*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCategories indicates an expected call of FindAllCategories.
func (mr *MockCategoryRepositoryMockRecorder) FindAllCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCategories", reflect.TypeOf((*MockCategoryRepository)(nil).FindAllCategories), ctx)
}

// FindCategoryByID mocks base method.
func (m *MockCategoryRepository) FindCategoryByID(ctx context.Context, id uuid.UUID) (*domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCategoryByID", ctx, id)
	ret0, _ := ret[0].(*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCategoryByID indicates an expected call of FindCategoryByID.
func (mr *MockCategoryRepositoryMockRecorder) FindCategoryByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCategoryByID", reflect.TypeOf((*MockCategoryRepository)(nil).FindCategoryByID), ctx, id)
}

// Update mocks base method.
func (m *MockCategoryRepository) Update(ctx context.Context, p *domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCategoryRepositoryMockRecorder) Update(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryRepository)(nil).Update), ctx, p)
}
